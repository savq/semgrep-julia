(* Generated by ocaml-tree-sitter. *)
(*
   julia grammar

   entrypoint: source_file
*)

open! Sexplib.Conv
open Tree_sitter_run

type identifier =
  Token.t (* pattern "[_\\p{XID_Start}\226\136\130\226\136\135\226\136\143\226\136\145\194\176\\p{Emoji}&&[^0-9#*]][^\"'`\\s\\.\\-\\[\\]$&,:;@(){}+==*=/=//=\\\\=^=\195\183=%=<<=>>=>>>=||
[@@deriving sexp_of]

type tok_0b_pat_1c3450e = Token.t
[@@deriving sexp_of]

type immediate_brace = Token.t
[@@deriving sexp_of]

type times_operator = Token.t
[@@deriving sexp_of]

type tok_0x_pat_50ed65e = Token.t
[@@deriving sexp_of]

type assign_operator = Token.t
[@@deriving sexp_of]

type ellipsis_operator = Token.t
[@@deriving sexp_of]

type escape_sequence = Token.t
[@@deriving sexp_of]

type tok_choice_dot_choice_barbar = Token.t
[@@deriving sexp_of]

type comparison_operator = Token.t
[@@deriving sexp_of]

type string_content_no_interp = Token.t
[@@deriving sexp_of]

type tok_choice_0x_pat_50ed65e_choice_dot_choice_pat_50ed65e_pat_dd04cb4 =
  Token.t
[@@deriving sexp_of]

type imm_tok_dot_choice_pat_a25c544_choice_pat_55159f5 = Token.t
[@@deriving sexp_of]

type arrow_operator = Token.t
[@@deriving sexp_of]

type imm_tok_squot = Token.t (* "'" *)
[@@deriving sexp_of]

type imm_tok_colon = Token.t (* ":" *)
[@@deriving sexp_of]

type pipe_left_operator = Token.t
[@@deriving sexp_of]

type tok_choice_dot_choice_plus = Token.t
[@@deriving sexp_of]

type immediate_bracket = Token.t
[@@deriving sexp_of]

type command_start = Token.t
[@@deriving sexp_of]

type character_literal = Token.t
[@@deriving sexp_of]

type tok_0o_pat_c83427c = Token.t
[@@deriving sexp_of]

type imm_tok_choice_bare = Token.t
[@@deriving sexp_of]

type tok_choice_dot_choice_ampamp = Token.t
[@@deriving sexp_of]

type tok_prim_pat_3d340f6_type = Token.t
[@@deriving sexp_of]

type tok_pat_a25c544_pat_55159f5 = Token.t
[@@deriving sexp_of]

type immediate_command_start = Token.t
[@@deriving sexp_of]

type plus_operator = Token.t
[@@deriving sexp_of]

type unary_operator = Token.t
[@@deriving sexp_of]

type tok_dot_pat_a25c544_choice_pat_55159f5 = Token.t
[@@deriving sexp_of]

type pat_4aee1e1 = Token.t (* pattern ;+ *)
[@@deriving sexp_of]

type imm_tok_dot = Token.t (* "." *)
[@@deriving sexp_of]

type immediate_paren = Token.t
[@@deriving sexp_of]

type tok_abst_pat_3d340f6_type = Token.t
[@@deriving sexp_of]

type string_start = Token.t
[@@deriving sexp_of]

type string_content = Token.t
[@@deriving sexp_of]

type bitshift_operator = Token.t
[@@deriving sexp_of]

type pair_operator = Token.t
[@@deriving sexp_of]

type pipe_right_operator = Token.t
[@@deriving sexp_of]

type command_end = Token.t
[@@deriving sexp_of]

type rational_operator = Token.t
[@@deriving sexp_of]

type string_end = Token.t
[@@deriving sexp_of]

type power_operator = Token.t
[@@deriving sexp_of]

type boolean_literal = [
    `True of Token.t (* "true" *)
  | `False of Token.t (* "false" *)
]
[@@deriving sexp_of]

type pat_a25c544 = Token.t (* pattern [0-9]|([0-9][0-9_]*[0-9]) *)
[@@deriving sexp_of]

type immediate_string_start = Token.t
[@@deriving sexp_of]

type imm_tok_choice_tok_choice_dot_choice_plus = Token.t
[@@deriving sexp_of]

type anon_choice_str_content_no_interp_24ac4f9 = [
    `Str_content_no_interp of string_content_no_interp (*tok*)
  | `Esc_seq of escape_sequence (*tok*)
]
[@@deriving sexp_of]

type terminator = [ `LF of Token.t (* "\n" *) | `Pat_4aee1e1 of pat_4aee1e1 ]
[@@deriving sexp_of]

type operator = [
    `Pair_op of pair_operator (*tok*)
  | `Arrow_op of arrow_operator (*tok*)
  | `Comp_op of comparison_operator (*tok*)
  | `Pipe_left_op of pipe_left_operator (*tok*)
  | `Pipe_right_op of pipe_right_operator (*tok*)
  | `Ellips_op of ellipsis_operator (*tok*)
  | `Plus_op of plus_operator (*tok*)
  | `Times_op of times_operator (*tok*)
  | `Rati_op of rational_operator (*tok*)
  | `Bits_op of bitshift_operator (*tok*)
  | `Power_op of power_operator (*tok*)
  | `Un_op of unary_operator (*tok*)
]
[@@deriving sexp_of]

type integer_literal = [
    `Tok_0b_pat_1c3450e of tok_0b_pat_1c3450e
  | `Tok_0o_pat_c83427c of tok_0o_pat_c83427c
  | `Tok_0x_pat_50ed65e of tok_0x_pat_50ed65e
  | `Pat_a25c544 of pat_a25c544
]
[@@deriving sexp_of]

type float_literal = [
    `Tok_dot_pat_a25c544_choice_pat_55159f5 of
      tok_dot_pat_a25c544_choice_pat_55159f5
  | `Pat_a25c544_imm_tok_dot_choice_pat_a25c544_choice_pat_55159f5 of (
        pat_a25c544 * imm_tok_dot_choice_pat_a25c544_choice_pat_55159f5
    )
  | `Tok_pat_a25c544_pat_55159f5 of tok_pat_a25c544_pat_55159f5
  | `Tok_choice_0x_pat_50ed65e_choice_dot_choice_pat_50ed65e_pat_dd04cb4 of
      tok_choice_0x_pat_50ed65e_choice_dot_choice_pat_50ed65e_pat_dd04cb4
]
[@@deriving sexp_of]

type prefixed_command_literal = (
    identifier (*tok*)
  * immediate_command_start (*tok*)
  * anon_choice_str_content_no_interp_24ac4f9 list (* zero or more *)
  * command_end (*tok*)
  * identifier (*tok*) option
)
[@@deriving sexp_of]

type prefixed_string_literal = (
    identifier (*tok*)
  * immediate_string_start (*tok*)
  * anon_choice_str_content_no_interp_24ac4f9 list (* zero or more *)
  * string_end (*tok*)
  * identifier (*tok*) option
)
[@@deriving sexp_of]

type anon_choice_id_267a5f7 = [ `Id of identifier (*tok*) | `Op of operator ]
[@@deriving sexp_of]

type adjoint_expression = (expression * imm_tok_squot (*tok*))

and anon_choice_assign_33ef5de = [
    `Assign of assignment
  | `Bare_tuple of bare_tuple
  | `Id of identifier (*tok*)
  | `Typed_exp of typed_expression
]

and anon_choice_decl_f2ab0d0 = [
    `Decl of declaration
  | `Exp of expression
  | `Assign of assignment
  | `Short_func_defi of short_function_definition
]

and anon_choice_exp_0381022 = [
    `Exp of expression
  | `Type_clause of type_clause
  | `Named_field of named_field
]

and anon_choice_exp_3c18676 = [
    `Exp of expression
  | `Assign of assignment
  | `Bare_tuple of bare_tuple
]

and anon_choice_exp_91c2553 = [
    `Exp of expression
  | `Named_field of named_field
]

and anon_choice_exp_b833738 = [ `Exp of expression | `Assign of assignment ]

and anon_choice_exp_c681153 = [
    `Exp of expression
  | `Decl of declaration
  | `Assign of assignment
  | `Bare_tuple of bare_tuple
  | `Short_func_defi of short_function_definition
]

and anon_choice_exp_rep_COMMA_choice_exp_7e6cb67 = (
    anon_choice_exp_91c2553
  * (Token.t (* "," *) * anon_choice_exp_91c2553) list (* zero or more *)
)

and anon_choice_for_clause_4e31839 = [
    `For_clause of for_clause
  | `If_clause of (Token.t (* "if" *) * expression)
]

and anon_choice_id_00cc266 = [
    `Id of identifier (*tok*)
  | `Interp_exp of interpolation_expression
]

and anon_choice_id_6314bc3 = [
    `Id of identifier (*tok*)
  | `Slurp_param of slurp_parameter
  | `Typed_param of typed_parameter
]

and anon_choice_id_687d935 = [
    `Id of identifier (*tok*)
  | `Slurp_param of slurp_parameter
  | `Opt_param of optional_parameter
  | `Typed_param of typed_parameter
  | `Interp_exp of interpolation_expression
  | `Closed_macr_exp of closed_macrocall_expression
]

and anon_choice_id_6965274 = [
    `Id of identifier (*tok*)
  | `Slurp_param of slurp_parameter
  | `Typed_param of typed_parameter
  | `Tuple_exp of tuple_expression
  | `LPAR_choice_id_RPAR of (
        Token.t (* "(" *) * anon_choice_id_6314bc3 * Token.t (* ")" *)
    )
]

and anon_choice_id_a8b5d0d = [
    `Id of identifier (*tok*)
  | `Macro_id of macro_identifier
  | `Op of operator
  | `LPAR_choice_id_RPAR of (
        Token.t (* "(" *) * anon_choice_id_267a5f7 * Token.t (* ")" *)
    )
  | `Interp_exp of interpolation_expression
]

and anon_choice_id_c087cf9 = [
    `Id of identifier (*tok*)
  | `Slurp_param of slurp_parameter
  | `Opt_param of optional_parameter
  | `Typed_param of typed_parameter
  | `Tuple_exp of tuple_expression
  | `Interp_exp of interpolation_expression
  | `Closed_macr_exp of closed_macrocall_expression
  | `Call_exp of call_expression
]

and anon_choice_id_c313bb1 = [
    `Id of identifier (*tok*)
  | `Named_field of named_field
]

and anon_choice_id_f1f5a37 = [
    `Id of identifier (*tok*)
  | `Scoped_id of scoped_identifier
]

and anon_choice_impo_3d80307 = [
    `Impo of importable
  | `Import_alias of import_alias
  | `Macro_id of macro_identifier
  | `Op of operator
]

and anon_choice_impo_a542259 = [
    `Impo of importable
  | `Import_alias of import_alias
]

and anon_choice_str_content_838a78d = [
    `Str_content of string_content (*tok*)
  | `Str_interp of (
        Token.t (* "$" *)
      * [
            `Id of identifier (*tok*)
          | `Imme_paren_LPAR_choice_exp_RPAR of (
                immediate_paren (*tok*) * Token.t (* "(" *)
              * anon_choice_exp_91c2553 * Token.t (* ")" *)
            )
        ]
    )
  | `Esc_seq of escape_sequence (*tok*)
]

and argument_list = (
    Token.t (* "(" *)
  * [
        `Choice_exp_rep_COMMA_choice_exp_opt_COMMA_opt_exp_comp_clause of (
            anon_choice_exp_91c2553
          * (Token.t (* "," *) * anon_choice_exp_91c2553)
              list (* zero or more *)
          * (Token.t (* "," *) * (expression * comprehension_clause) option)
              option
        )
      | `Exp_comp_clause of (expression * comprehension_clause)
    ]
      option
  * (Token.t (* ";" *) * anon_choice_exp_rep_COMMA_choice_exp_7e6cb67 option)
      option
  * Token.t (* "," *) option
  * Token.t (* ")" *)
)

and assignment = (
    [
        `Quot of quotable
      | `Field_exp of field_expression
      | `Index_exp of index_expression
      | `Para_type_exp of parametrized_type_expression
      | `Interp_exp of interpolation_expression
      | `Quote_exp of quote_expression
      | `Typed_exp of typed_expression
      | `Op of operator
      | `Pref_cmd_lit of prefixed_command_literal
      | `Pref_str_lit of prefixed_string_literal
      | `Bin_exp of binary_expression
      | `Un_exp of unary_expression
      | `Bare_tuple of bare_tuple
    ]
  * Token.t (* "=" *)
  * anon_choice_exp_3c18676
)

and bare_tuple = (
    expression
  * (Token.t (* "," *) * expression) list (* one or more *)
)

and binary_expression = [
    `Exp_power_op_exp of (expression * power_operator (*tok*) * expression)
  | `Exp_rati_op_exp of (expression * rational_operator (*tok*) * expression)
  | `Exp_bits_op_exp of (expression * bitshift_operator (*tok*) * expression)
  | `Exp_times_op_exp of (expression * times_operator (*tok*) * expression)
  | `Exp_choice_tok_choice_dot_choice_plus_exp of (
        expression
      * [
            `Tok_choice_dot_choice_plus of tok_choice_dot_choice_plus
          | `Plus_op of plus_operator (*tok*)
        ]
      * expression
    )
  | `Exp_ellips_op_exp of (
        expression * ellipsis_operator (*tok*) * expression
    )
  | `Exp_arrow_op_exp of (expression * arrow_operator (*tok*) * expression)
  | `Exp_pipe_left_op_exp of (
        expression * pipe_left_operator (*tok*) * expression
    )
  | `Exp_pipe_right_op_exp of (
        expression * pipe_right_operator (*tok*) * expression
    )
  | `Exp_choice_in_exp of (
        expression
      * [
            `In of Token.t (* "in" *)
          | `Isa of Token.t (* "isa" *)
          | `Comp_op of comparison_operator (*tok*)
        ]
      * expression
    )
  | `Exp_tok_choice_dot_choice_barbar_exp of (
        expression * tok_choice_dot_choice_barbar * expression
    )
  | `Exp_tok_choice_dot_choice_ampamp_exp of (
        expression * tok_choice_dot_choice_ampamp * expression
    )
  | `Exp_pair_op_exp of (expression * pair_operator (*tok*) * expression)
]

and block = (
    anon_choice_exp_c681153
  * (terminator * anon_choice_exp_c681153) list (* zero or more *)
  * terminator option
)

and call_expression = (
    [ `Prim_exp of primary_expression | `Op of operator ]
  * immediate_paren (*tok*)
  * argument_list
  * do_clause option
)

and catch_clause = (
    Token.t (* "catch" *)
  * identifier (*tok*) option
  * terminator option
  * source_file
)

and closed_macrocall_expression = (
    (primary_expression * imm_tok_dot (*tok*)) option
  * macro_identifier
  * immediate_paren (*tok*)
  * argument_list
  * do_clause option
)

and command_literal = (
    command_start (*tok*)
  * anon_choice_str_content_838a78d list (* zero or more *)
  * command_end (*tok*)
)

and compound_assignment_expression = (
    primary_expression * assign_operator (*tok*) * expression
)

and compound_statement = (
    Token.t (* "begin" *)
  * terminator option
  * source_file
  * Token.t (* "end" *)
)

and comprehension_clause = (
    for_clause
  * Token.t (* "\n" *) option
  * (
        anon_choice_for_clause_4e31839
      * (Token.t (* "\n" *) option * anon_choice_for_clause_4e31839)
          list (* zero or more *)
    )
      option
  * Token.t (* "\n" *) option
)

and comprehension_expression = (
    Token.t (* "[" *)
  * anon_choice_exp_b833738
  * terminator option
  * comprehension_clause
  * Token.t (* "]" *)
)

and curly_expression = (
    Token.t (* "{" *)
  * (
        anon_choice_exp_0381022
      * (Token.t (* "," *) * anon_choice_exp_0381022) list (* zero or more *)
    )
      option
  * Token.t (* "," *) option
  * Token.t (* "}" *)
)

and declaration = [
    `Const_decl of (
        Token.t (* "const" *)
      * [
            `Assign of assignment
          | `Id of identifier (*tok*)
          | `Typed_exp of typed_expression
        ]
    )
  | `Local_decl of (Token.t (* "local" *) * anon_choice_assign_33ef5de)
  | `Global_decl of (Token.t (* "global" *) * anon_choice_assign_33ef5de)
]

and definition = [
    `Module_defi of (
        [
            `Module of Token.t (* "module" *)
          | `Bare of Token.t (* "baremodule" *)
        ]
      * anon_choice_id_00cc266
      * terminator option
      * source_file
      * Token.t (* "end" *)
    )
  | `Abst_defi of (
        tok_abst_pat_3d340f6_type
      * anon_choice_id_00cc266
      * (immediate_brace (*tok*) * curly_expression) option
      * type_clause option
      * Token.t (* "end" *)
    )
  | `Prim_defi of (
        tok_prim_pat_3d340f6_type
      * anon_choice_id_00cc266
      * (immediate_brace (*tok*) * curly_expression) option
      * type_clause option
      * integer_literal
      * Token.t (* "end" *)
    )
  | `Struct_defi of (
        Token.t (* "mutable" *) option
      * Token.t (* "struct" *)
      * anon_choice_id_00cc266
      * (immediate_brace (*tok*) * curly_expression) option
      * type_clause option
      * terminator option
      * source_file
      * Token.t (* "end" *)
    )
  | `Func_defi of (
        Token.t (* "function" *)
      * [
            `Choice_func_sign_opt_choice_LF_opt_blk of (
                [
                    `Func_sign of function_signature
                  | `Param_list_rep_where_clause of (
                        parameter_list
                      * where_clause list (* zero or more *)
                    )
                ]
              * terminator option
              * source_file
            )
          | `Choice_id of anon_choice_id_267a5f7
        ]
      * Token.t (* "end" *)
    )
  | `Macro_defi of (
        Token.t (* "macro" *)
      * [
            `Id of identifier (*tok*)
          | `Op of operator
          | `Interp_exp of interpolation_expression
        ]
      * immediate_paren (*tok*)
      * parameter_list
      * terminator option
      * source_file
      * Token.t (* "end" *)
    )
]

and do_clause = (
    Token.t (* "do" *) * do_parameter_list * source_file
  * Token.t (* "end" *)
)

and do_parameter_list = (
    (
        anon_choice_id_6965274
      * (Token.t (* "," *) * anon_choice_id_6965274) list (* zero or more *)
    )
      option
  * terminator
)

and else_clause = (Token.t (* "else" *) * terminator option * source_file)

and elseif_clause = (
    Token.t (* "elseif" *)
  * expression
  * terminator option
  * source_file
)

and export_statement = (
    Token.t (* "export" *)
  * anon_choice_id_a8b5d0d
  * (Token.t (* "," *) * anon_choice_id_a8b5d0d) list (* zero or more *)
)

and expression = [
    `Choice_choice_module_defi of [
        `Choice_module_defi of definition
      | `Choice_choice_comp_stmt of statement
      | `Lit of literal
      | `Prim_exp of primary_expression
      | `Macr_exp of macrocall_expression
      | `Adjo_exp of adjoint_expression
      | `Un_exp of unary_expression
      | `Bin_exp of binary_expression
      | `Range_exp of range_expression
      | `Splat_exp of splat_expression
      | `Tern_exp of ternary_expression
      | `Typed_exp of typed_expression
      | `Func_exp of function_expression
      | `Juxt_exp of juxtaposition_expression
      | `Comp_assign_exp of compound_assignment_expression
      | `Where_exp of where_expression
      | `Op of operator
      | `COLON of Token.t (* ":" *)
      | `Begin of Token.t (* "begin" *)
    ]
  | `Semg_ellips of Token.t (* "..." *)
]

and field_expression = (
    primary_expression
  * imm_tok_dot (*tok*)
  * [
        `Id of identifier (*tok*)
      | `Interp_exp of interpolation_expression
      | `Quote_exp of quote_expression
      | `Cmd_lit of command_literal
      | `Str_lit of string_literal
      | `Pref_cmd_lit of prefixed_command_literal
      | `Pref_str_lit of prefixed_string_literal
    ]
)

and finally_clause = (
    Token.t (* "finally" *)
  * terminator option
  * source_file
)

and for_binding = (
    [
        `Id of identifier (*tok*)
      | `Tuple_exp of tuple_expression
      | `Typed_param of typed_parameter
      | `Interp_exp of interpolation_expression
    ]
  * [
        `In of Token.t (* "in" *)
      | `EQ of Token.t (* "=" *)
      | `UNKUNKUNK of Token.t (* "\226\136\136" *)
    ]
  * expression
)

and for_clause = (
    Token.t (* "for" *)
  * for_binding
  * (Token.t (* "," *) * for_binding) list (* zero or more *)
)

and for_statement = (
    Token.t (* "for" *)
  * for_binding
  * (Token.t (* "," *) * for_binding) list (* zero or more *)
  * terminator option
  * source_file
  * Token.t (* "end" *)
)

and function_expression = (
    [
        `Id of identifier (*tok*)
      | `Param_list of parameter_list
      | `Typed_exp of typed_expression
    ]
  * Token.t (* "->" *)
  * anon_choice_exp_3c18676
)

and function_signature = (
    [
        `Id of identifier (*tok*)
      | `Op of operator
      | `Field_exp of field_expression
      | `LPAR_choice_id_RPAR of (
            Token.t (* "(" *) * anon_choice_id_267a5f7 * Token.t (* ")" *)
        )
      | `LPAR_typed_param_RPAR of (
            Token.t (* "(" *) * typed_parameter * Token.t (* ")" *)
        )
      | `Interp_exp of interpolation_expression
    ]
  * (immediate_brace (*tok*) * curly_expression) option
  * immediate_paren (*tok*)
  * parameter_list
  * (Token.t (* "::" *) * primary_expression) option
  * where_clause list (* zero or more *)
)

and if_statement = (
    Token.t (* "if" *)
  * expression
  * terminator option
  * source_file
  * elseif_clause list (* zero or more *)
  * else_clause option
  * Token.t (* "end" *)
)

and import_alias = (importable * Token.t (* "as" *) * identifier (*tok*))

and import_list = (
    anon_choice_impo_a542259
  * (Token.t (* "," *) * anon_choice_impo_a542259) list (* zero or more *)
)

and import_statement = (
    [ `Import of Token.t (* "import" *) | `Using of Token.t (* "using" *) ]
  * [ `Import_list of import_list | `Sele_import of selected_import ]
)

and importable = [
    `Id of identifier (*tok*)
  | `Scoped_id of scoped_identifier
  | `Rela_qual of (
        Token.t (* "." *) list (* one or more *)
      * anon_choice_id_f1f5a37
    )
  | `LPAR_choice_id_RPAR of (
        Token.t (* "(" *) * anon_choice_id_267a5f7 * Token.t (* ")" *)
    )
  | `Interp_exp of interpolation_expression
]

and index_expression = (
    primary_expression
  * immediate_bracket (*tok*)
  * [
        `Comp_exp of comprehension_expression
      | `Matrix_exp of matrix_expression
      | `Vec_exp of vector_expression
    ]
)

and interpolation_expression = (
    Token.t (* "$" *)
  * [ `Lit of literal | `Quot of quotable ]
)

and juxtaposition_expression = (
    [
        `Int_lit of integer_literal
      | `Float_lit of float_literal
      | `Adjo_exp of adjoint_expression
    ]
  * primary_expression
)

and keyword_parameters = (
    Token.t (* ";" *)
  * anon_choice_id_687d935
  * (Token.t (* "," *) * anon_choice_id_687d935) list (* zero or more *)
  * Token.t (* "," *) option
)

and let_statement = (
    Token.t (* "let" *)
  * (
        anon_choice_id_c313bb1
      * (Token.t (* "," *) * anon_choice_id_c313bb1) list (* zero or more *)
    )
      option
  * terminator
  * source_file
  * Token.t (* "end" *)
)

and literal = [
    `Bool_lit of boolean_literal
  | `Int_lit of integer_literal
  | `Float_lit of float_literal
  | `Char_lit of character_literal (*tok*)
  | `Str_lit of string_literal
  | `Cmd_lit of command_literal
]

and macro_argument_list = anon_choice_exp_c681153 list (* one or more *)

and macro_identifier = (
    Token.t (* "@" *)
  * [
        `Id of identifier (*tok*)
      | `Op of operator
      | `Scoped_id of scoped_identifier
      | `Imm_tok_dot of imm_tok_dot (*tok*)
    ]
)

and macrocall_expression = (
    (primary_expression * imm_tok_dot (*tok*)) option
  * macro_identifier
  * macro_argument_list option
)

and matrix_expression = (
    Token.t (* "[" *)
  * [
        `Matrix_row_choice_LF_opt_LF of (
            matrix_row
          * terminator
          * Token.t (* "\n" *) option
        )
      | `Matrix_row_rep_choice_LF_opt_LF_matrix_row of (
            matrix_row
          * (terminator * Token.t (* "\n" *) option * matrix_row)
              list (* zero or more *)
        )
    ]
  * terminator option
  * Token.t (* "\n" *) option
  * Token.t (* "]" *)
)

and matrix_row = anon_choice_exp_91c2553 list (* one or more *)

and named_field = (
    anon_choice_id_00cc266 * Token.t (* "=" *) * anon_choice_exp_91c2553
)

and optional_parameter = (
    [
        `Id of identifier (*tok*)
      | `Typed_param of typed_parameter
      | `Tuple_exp of tuple_expression
    ]
  * Token.t (* "=" *)
  * expression
)

and parameter_list = (
    Token.t (* "(" *)
  * (
        anon_choice_id_c087cf9
      * (Token.t (* "," *) * anon_choice_id_c087cf9) list (* zero or more *)
    )
      option
  * Token.t (* "," *) option
  * keyword_parameters option
  * Token.t (* ")" *)
)

and parametrized_type_expression = (
    primary_expression * immediate_brace (*tok*) * curly_expression
)

and primary_expression = [
    `Quot of quotable
  | `Broa_call_exp of (
        primary_expression
      * imm_tok_dot (*tok*)
      * immediate_paren (*tok*)
      * argument_list
      * do_clause option
    )
  | `Call_exp of call_expression
  | `Closed_macr_exp of closed_macrocall_expression
  | `Para_type_exp of parametrized_type_expression
  | `Field_exp of field_expression
  | `Index_exp of index_expression
  | `Interp_exp of interpolation_expression
  | `Quote_exp of quote_expression
  | `Pref_cmd_lit of prefixed_command_literal
  | `Pref_str_lit of prefixed_string_literal
]

and quotable = [
    `Id of identifier (*tok*)
  | `Curl_exp of curly_expression
  | `Comp_exp of comprehension_expression
  | `Matrix_exp of matrix_expression
  | `Vec_exp of vector_expression
  | `Paren_exp of (
        Token.t (* "(" *)
      * anon_choice_decl_f2ab0d0
      * (Token.t (* ";" *) * anon_choice_decl_f2ab0d0)
          list (* zero or more *)
      * comprehension_clause option
      * Token.t (* ";" *) option
      * Token.t (* ")" *)
    )
  | `Tuple_exp of tuple_expression
]

and quote_expression = (
    Token.t (* ":" *)
  * [
        `Lit of literal
      | `Quot of quotable
      | `Op of operator
      | `Imm_tok_choice_tok_choice_dot_choice_plus of
          imm_tok_choice_tok_choice_dot_choice_plus
      | `Imm_tok_choice_bare of imm_tok_choice_bare
    ]
)

and quote_statement = (
    Token.t (* "quote" *)
  * terminator option
  * source_file
  * Token.t (* "end" *)
)

and range_expression = (expression * imm_tok_colon (*tok*) * expression)

and return_statement = (
    Token.t (* "return" *)
  * anon_choice_exp_3c18676 option
)

and scoped_identifier = (
    anon_choice_id_f1f5a37
  * imm_tok_dot (*tok*)
  * [
        `Id of identifier (*tok*)
      | `Interp_exp of interpolation_expression
      | `Quote_exp of quote_expression
    ]
)

and selected_import = (
    importable
  * imm_tok_colon (*tok*)
  * anon_choice_impo_3d80307
  * (Token.t (* "," *) * anon_choice_impo_3d80307) list (* zero or more *)
)

and short_function_definition = (
    function_signature * Token.t (* "=" *) * anon_choice_exp_3c18676
)

and slurp_parameter = (
    [ `Id of identifier (*tok*) | `Typed_param of typed_parameter ]
  * Token.t (* "..." *)
)

and source_file = block option

and splat_expression = (expression * Token.t (* "..." *))

and statement = [
    `Choice_comp_stmt of [
        `Comp_stmt of compound_statement
      | `Quote_stmt of quote_statement
      | `Let_stmt of let_statement
      | `If_stmt of if_statement
      | `Try_stmt of try_statement
      | `For_stmt of for_statement
      | `While_stmt of while_statement
      | `Brk_stmt of Token.t (* "break" *)
      | `Cont_stmt of Token.t (* "continue" *)
      | `Ret_stmt of return_statement
      | `Export_stmt of export_statement
      | `Import_stmt of import_statement
    ]
  | `Semg_ellips of Token.t (* "..." *)
]

and string_literal = (
    string_start (*tok*)
  * anon_choice_str_content_838a78d list (* zero or more *)
  * string_end (*tok*)
)

and ternary_expression = (
    expression * Token.t (* "?" *) * anon_choice_exp_b833738
  * Token.t (* ":" *) * anon_choice_exp_b833738
)

and try_statement = (
    Token.t (* "try" *)
  * terminator option
  * source_file
  * catch_clause option
  * finally_clause option
  * Token.t (* "end" *)
)

and tuple_expression = (
    Token.t (* "(" *)
  * [
        `Choice_exp_COMMA of (anon_choice_exp_91c2553 * Token.t (* "," *))
      | `Choice_exp_rep1_COMMA_choice_exp_opt_choice_comp_clause of (
            anon_choice_exp_91c2553
          * (Token.t (* "," *) * anon_choice_exp_91c2553)
              list (* one or more *)
          * [
                `Comp_clause of comprehension_clause
              | `COMMA of Token.t (* "," *)
            ]
              option
        )
      | `SEMI of Token.t (* ";" *)
      | `SEMI_choice_exp_rep_COMMA_choice_exp_opt_COMMA of (
            Token.t (* ";" *)
          * anon_choice_exp_91c2553
          * (Token.t (* "," *) * anon_choice_exp_91c2553)
              list (* zero or more *)
          * Token.t (* "," *) option
        )
    ]
      option
  * Token.t (* ")" *)
)

and type_clause = (
    [ `LTCOLON of Token.t (* "<:" *) | `GTCOLON of Token.t (* ">:" *) ]
  * primary_expression
)

and typed_expression = (
    expression
  * Token.t (* "::" *)
  * [ `Prim_exp of primary_expression ]
)

and typed_parameter = [
    `Opt_choice_id_COLONCOLON_prim_exp_opt_where_clause of (
        [
            `Id of identifier (*tok*)
          | `Tuple_exp of tuple_expression
          | `Interp_exp of interpolation_expression
        ]
          option
      * Token.t (* "::" *)
      * primary_expression
      * where_clause option
    )
  | `Semg_ellips of Token.t (* "..." *)
]

and unary_expression = (unary_operator (*tok*) * expression)

and vector_expression = (
    Token.t (* "[" *)
  * anon_choice_exp_rep_COMMA_choice_exp_7e6cb67 option
  * Token.t (* "," *) option
  * Token.t (* "]" *)
)

and where_clause = (
    Token.t (* "where" *)
  * primary_expression
  * type_clause option
)

and where_expression = (expression * Token.t (* "where" *) * expression)

and while_statement = (
    Token.t (* "while" *)
  * expression
  * terminator option
  * source_file
  * Token.t (* "end" *)
)
[@@deriving sexp_of]

type line_comment (* inlined *) = Token.t
[@@deriving sexp_of]

type break_statement (* inlined *) = Token.t (* "break" *)
[@@deriving sexp_of]

type continue_statement (* inlined *) = Token.t (* "continue" *)
[@@deriving sexp_of]

type block_comment (* inlined *) = Token.t
[@@deriving sexp_of]

type semgrep_ellipsis (* inlined *) = Token.t (* "..." *)
[@@deriving sexp_of]

type abstract_definition (* inlined *) = (
    tok_abst_pat_3d340f6_type
  * anon_choice_id_00cc266
  * (immediate_brace (*tok*) * curly_expression) option
  * type_clause option
  * Token.t (* "end" *)
)
[@@deriving sexp_of]

type broadcast_call_expression (* inlined *) = (
    primary_expression
  * imm_tok_dot (*tok*)
  * immediate_paren (*tok*)
  * argument_list
  * do_clause option
)
[@@deriving sexp_of]

type const_declaration (* inlined *) = (
    Token.t (* "const" *)
  * [
        `Assign of assignment
      | `Id of identifier (*tok*)
      | `Typed_exp of typed_expression
    ]
)
[@@deriving sexp_of]

type function_definition (* inlined *) = (
    Token.t (* "function" *)
  * [
        `Choice_func_sign_opt_choice_LF_opt_blk of (
            [
                `Func_sign of function_signature
              | `Param_list_rep_where_clause of (
                    parameter_list
                  * where_clause list (* zero or more *)
                )
            ]
          * terminator option
          * source_file
        )
      | `Choice_id of anon_choice_id_267a5f7
    ]
  * Token.t (* "end" *)
)
[@@deriving sexp_of]

type global_declaration (* inlined *) = (
    Token.t (* "global" *) * anon_choice_assign_33ef5de
)
[@@deriving sexp_of]

type if_clause (* inlined *) = (Token.t (* "if" *) * expression)
[@@deriving sexp_of]

type local_declaration (* inlined *) = (
    Token.t (* "local" *) * anon_choice_assign_33ef5de
)
[@@deriving sexp_of]

type macro_definition (* inlined *) = (
    Token.t (* "macro" *)
  * [
        `Id of identifier (*tok*)
      | `Op of operator
      | `Interp_exp of interpolation_expression
    ]
  * immediate_paren (*tok*)
  * parameter_list
  * terminator option
  * source_file
  * Token.t (* "end" *)
)
[@@deriving sexp_of]

type module_definition (* inlined *) = (
    [
        `Module of Token.t (* "module" *)
      | `Bare of Token.t (* "baremodule" *)
    ]
  * anon_choice_id_00cc266
  * terminator option
  * source_file
  * Token.t (* "end" *)
)
[@@deriving sexp_of]

type parenthesized_expression (* inlined *) = (
    Token.t (* "(" *)
  * anon_choice_decl_f2ab0d0
  * (Token.t (* ";" *) * anon_choice_decl_f2ab0d0) list (* zero or more *)
  * comprehension_clause option
  * Token.t (* ";" *) option
  * Token.t (* ")" *)
)
[@@deriving sexp_of]

type primitive_definition (* inlined *) = (
    tok_prim_pat_3d340f6_type
  * anon_choice_id_00cc266
  * (immediate_brace (*tok*) * curly_expression) option
  * type_clause option
  * integer_literal
  * Token.t (* "end" *)
)
[@@deriving sexp_of]

type relative_qualifier (* inlined *) = (
    Token.t (* "." *) list (* one or more *)
  * anon_choice_id_f1f5a37
)
[@@deriving sexp_of]

type string_interpolation (* inlined *) = (
    Token.t (* "$" *)
  * [
        `Id of identifier (*tok*)
      | `Imme_paren_LPAR_choice_exp_RPAR of (
            immediate_paren (*tok*) * Token.t (* "(" *)
          * anon_choice_exp_91c2553 * Token.t (* ")" *)
        )
    ]
)
[@@deriving sexp_of]

type struct_definition (* inlined *) = (
    Token.t (* "mutable" *) option
  * Token.t (* "struct" *)
  * anon_choice_id_00cc266
  * (immediate_brace (*tok*) * curly_expression) option
  * type_clause option
  * terminator option
  * source_file
  * Token.t (* "end" *)
)
[@@deriving sexp_of]

type generator_expression (* inlined *) = (
    Token.t (* "(" *) * expression * comprehension_clause * Token.t (* ")" *)
)
[@@deriving sexp_of]

let dump_tree root =
  sexp_of_source_file root
  |> Print_sexp.to_stdout
